import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Objects;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {

        if(args.length < 2) {
            System.out.println("""
                               ----Help Panel----
                               Usage: cava (mode) (file)
                               
                               Modes:
                                 cpp    Makes files for c++ development based on inputted file
                                 build  Builds the file into a .so & .dll & .dylib
                               ------------------
                               """);
            return;
        }

        if (Objects.equals(args[0], "cpp")) GenerateCpp(args[1]);
        else if (Objects.equals(args[0], "build")){Build(args[1]);}
    }

    private static void GenerateCpp(String file) {

        File source = new File(file);
        if (!source.exists()) System.out.println("File not found");

        // Making Cava directory for generated file
        File dir = new File("Cava");
        if(!dir.exists()) if (!dir.mkdir()) System.out.println("Could not create directory Cava");

        // Running javac on the specified file
        try {
            Process process = Runtime.getRuntime().exec(new String[]{"\"" + System.getenv("JAVA_HOME") + "\\bin\\javac.exe\"", "-d", ".\\Cava","-h", ".\\Cava", "\"" + file + "\""});
            process.waitFor();
        } catch (IOException | InterruptedException e) {
            System.out.println("Error while running javac");
        }

        // Opening the .h file generated by javac
        File hFile = new File(file.substring(file.length() - 4) + "h");

        // Writing the correct things to the .h file
        if(hFile.canWrite() && hFile.canRead()){
            try {
                // Read
                Scanner scanner = new Scanner(hFile);
                ArrayList<String> lines = new ArrayList<String>();
                while(scanner.hasNextLine()) lines.add(scanner.nextLine());

                // Modify
                // TODO find all occurrences of JNIEXPORT and insert a function declaration 2 lines below with c++ types

                // Write
                FileWriter writer = new FileWriter(hFile);

                StringBuilder str = new StringBuilder();
                for(String line : lines) str.append(line).append("\n");

                writer.write(str.toString());
                writer.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }
    private static void Build(String file) {


    }
}
