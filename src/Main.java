import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Objects;
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Main {

    static class function{
        public String Name;
        public String ReturnType;
        public String[] Params;

        public function(String name, String returnType, String[] params)
        {
            Name = name;
            ReturnType = returnType;

            for(int i = 0; i < params.length; i++) {
                params[i] = params[i].replace("String", "std::string");
            }
            Params = params;
        }
    }

    public static void main(String[] args) {
        if(args.length < 2) {
            System.out.println("""
                               ----Help Panel----
                               Usage: cava (mode) (file)
                               
                               Modes:
                                 cpp    Makes files for c++ development based on inputted file
                                 build  Builds the file into a .so & .dll & .dylib
                               ------------------
                               """);
            return;
        }

        if (Objects.equals(args[0], "cpp")) GenerateCpp(args[1]);
        else if (Objects.equals(args[0], "build")){Build(args[1]);}
    }

    private static void GenerateCpp(String file) {
        //region Extracting info from .java file
        // Data variables
        String[] packages = {};
        String classname = "";
        ArrayList<function> functions = new ArrayList<>();

        // Getting java source file
        File source = new File(file);
        if (!source.exists()) {
            System.out.println("File not found");
            return;
        }

        Scanner scanner;
        try {
            scanner = new Scanner(source);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return;
        }

        //region Extraction loop
        while (scanner.hasNextLine())
        {
            String line = scanner.nextLine();

            // Package handling
            if(line.startsWith("package ")){
                packages = line.substring(7).split("(\\x2E)");
                packages[0] = packages[0].substring(1);
                packages[packages.length - 1] = packages[packages.length - 1].substring(0, packages[packages.length - 1].length() - 1);
            }

            // Class handling
            else if (line.startsWith("public class ")){
                classname = line.substring(13, line.length() - 2);
            }

            //region Function handling
            else if (line.contains(" native ")){
                int paramIndex = line.indexOf("(");
                int nameIndex = line.substring(0, paramIndex).lastIndexOf(" ");
                int typeIndex = line.substring(0, nameIndex).lastIndexOf(" ");
                int closeIndex = line.indexOf(")");

                String parameter = line.substring(paramIndex + 1, closeIndex);

                String[] parameters = parameter.split(",");

                if(!parameter.isEmpty()) {
                    for (int i = 0; i < parameters.length; i++) {
                        parameters[i] = parameters[i].substring(0, parameters[i].indexOf(" "));
                    }
                }

                functions.add(new function(line.substring(nameIndex, paramIndex), line.substring(typeIndex, nameIndex), parameters));
            }
            //endregion
        }
        //endregion

        //endregion

        // Making Cava directory for generated files
        File dir = new File("Cava");
        if(!dir.exists()) if (!dir.mkdir()) System.out.println("Could not create directory Cava");

        //region Running javac on the specified file
        try {
            Process process = Runtime.getRuntime().exec(new String[]{"\"" + System.getenv("JAVA_HOME") + "\\bin\\javac.exe\"", "-d", ".\\Cava","-h", ".\\Cava", "\"" + file + "\""});
            process.waitFor();
        } catch (IOException | InterruptedException e) {
            System.out.println("Error while running javac");
            return;
        }
        //endregion

        //region Opening generated .h file
        // Getting the .h file name by adding the packages
        StringBuilder hFileName = new StringBuilder("Cava/");
        for (String pack : packages) hFileName.append(pack).append("_");
        hFileName.append(file, 0, file.length() - 4).append("h");

        // Opening the .h file generated by javac
        File hFile = new File(hFileName.toString());
        if(!hFile.exists()){
            System.out.println("Could not find header file");
            return;
        }
        //endregion

        //region Editing the .h file
        if(hFile.canWrite() && hFile.canRead()){
            try {
                //region Read and save entire .h file into a list
                scanner = new Scanner(hFile);
                ArrayList<String> lines = new ArrayList<>();
                while(scanner.hasNextLine()) lines.add(scanner.nextLine());
                scanner.close();
                //endregion

                //region Modify the .h file to include all data from the .java file
                // TODO find all occurrences of JNIEXPORT and insert a function declaration 2 lines below with c++ types

                lines.add("/// CAVA GENERATION");
                int lineIndex = lines.size();
                StringBuilder indent = new StringBuilder();

                //region Adding namespaces
                for (String pack : packages) {
                    lines.add(lineIndex, indent + "namespace " + pack);
                    lines.add(lineIndex + 1, "{");
                    lineIndex += 2;
                    lines.add(lineIndex, indent + "}");
                    indent.append("    ");
                }
                //endregion

                //region Adding class
                lines.add(lineIndex, indent + "class " + classname);
                lines.add(lineIndex + 1, indent + "{");
                lines.add(lineIndex + 2, indent + "public:");
                lineIndex += 3;
                lines.add(lineIndex, indent + "}");
                indent.append("    ");
                //endregion

                //region Adding native functions
                for(function func : functions) {
                    StringBuilder funcString = new StringBuilder(indent + func.ReturnType + func.Name + "(");

                    for(String param : func.Params)
                    {
                        funcString.append(param);
                    }

                    funcString.append(");");

                    lines.add(lineIndex, funcString.toString());
                }
                //endregion

                //endregion

                //region Write the list into the .h file
                FileWriter writer = new FileWriter(hFile);

                StringBuilder str = new StringBuilder();
                for(String line : lines) str.append(line).append("\n");

                writer.write(str.toString());
                writer.close();
                //endregion
            } catch (IOException e) {
                e.printStackTrace();
                return;
            }
        }
        //endregion

        //region Generating .cpp file

        // Opening and writing to the .cpp file
        File cpp = new File("Cava/Cava.cpp");
        try {
            cpp.createNewFile();
            FileWriter writer = new FileWriter(cpp);
            StringBuilder str = new StringBuilder("#include \"" + hFileName + "\"\n");

            for(function func : functions) {
                StringBuilder jniFunction = new StringBuilder("JNIEXPORT " + func.ReturnType.strip() + "JNICALL Java_");

                for(String pack : packages) {
                    jniFunction.append(pack).append("_");
                }
                jniFunction.append(classname).append("_").append(func.Name.strip());

                str.append(jniFunction).append("\n");
            }

            writer.write(str.toString());
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        //endregion
    }
    private static void Build(String file) {

    }
}
